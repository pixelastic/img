#!/usr/bin/env ruby
require_relative '../lib/image_helper'

# Compress PNG images in the best lossy way
class PNGmin
  include ImageHelper
  def initialize(*inputs)
    @usage = 'jpgmin ./input.jpg [./input2.jpg]'
    @documentation = 'Compress jpg files'

    @inputs = validate_inputs(inputs, 'jpg')

    @lower_bound = 0.014250
    @upper_bound = 0.016500
  end


  # Compress with 80
  # check the value
  # If in range, quality is ok
  #   can still improve, try with q--
  #   direction down
  # If not in range, too strong
  #   is too strong, try with q++
  #   direction up
  #
  # Try again, while in range, in the same direction
  # if not in range, try again with a lower step (10 => 5 => 2 => 1), in the
  # opposite direction until it's in range
  # 
  #
  
  def compress(file, quality)
    options = [
      file.shellescape,
      "-quality #{quality}",
      "#{quality}.jpg"
    ]
    command = "convert #{options.join(' ')}"
    `#{command}`
  end

  def run
    input = @inputs[0]

    compress(input, 80)



    # @inputs.each do |input|
    #   compress_jpg(input)
    # end
  end
end
PNGmin.new(*ARGV).run


